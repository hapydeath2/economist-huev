import discord
from discord.ext import commands
import json
import os
import asyncio
import datetime

TOKEN = os.getenv('DISCORD_TOKEN')

# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
# –≠—Ç–æ—Ç –ø—É—Ç—å –¢–û–ß–ù–û —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Mount Path –≤–∞—à–µ–≥–æ Volume –≤ Railway (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/data').
DATA_DIR = '/data'

DATA_FILE = os.path.join(DATA_DIR, 'users_data.json')
SHOP_FILE = os.path.join(DATA_DIR, 'shop.json')

ROLE_FOR_SHOP_ADDS = 1383053097672380456

OWNER_DISCORD_ID = 502834249666265089 # <-- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –ü–õ–ï–ô–°–•–û–õ–î–ï–† –ù–ê –í–ê–® ID!

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix='!', intents=intents)

def load_data():
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR, exist_ok=True)
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError:
        print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Error decoding JSON from {DATA_FILE}. Returning empty data.")
        return {}
    except Exception as e:
        print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] An error occurred while loading data: {e}")
        return {}


def save_data(data):
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR, exist_ok=True)
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4)
    except Exception as e:
        print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] An error occurred while saving data: {e}")

def load_shop():
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR, exist_ok=True)
    if not os.path.exists(SHOP_FILE):
        return []
    try:
        with open(SHOP_FILE, "r", encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError:
        print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Error decoding JSON from {SHOP_FILE}. Returning empty shop.")
        return []
    except Exception as e:
        print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] An error occurred while loading shop: {e}")
        return []


def save_shop(shop):
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR, exist_ok=True)
    try:
        with open(SHOP_FILE, "w", encoding='utf-8') as f:
            json.dump(shop, f, indent=4)
    except Exception as e:
        print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] An error occurred while saving shop: {e}")

def add_user_if_needed(user_id):
    data = load_data()
    user_id = str(user_id)
    if user_id not in data:
        data[user_id] = {"coins": 0, "daily_streak":0}
        save_data(data)

def add_coins(user_id, amount):
    data = load_data()
    user_id=str(user_id)
    if user_id not in data:
        data[user_id] = {"coins": 0, "daily_streak":0}
    data[user_id]["coins"] += amount
    save_data(data)

async def send_backup_to_owner():
    await bot.wait_until_ready()
    owner = bot.get_user(OWNER_DISCORD_ID)
    if not owner:
        print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Owner user {OWNER_DISCORD_ID} not found. Cannot send backup.")
        return

    print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Attempting to send backup to owner (ID: {OWNER_DISCORD_ID}).")
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'rb') as f:
                await owner.send("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø: users_data.json", file=discord.File(f, 'users_data.json'))
        else:
            await owner.send("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø: users_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        if os.path.exists(SHOP_FILE):
            with open(SHOP_FILE, 'rb') as f:
                await owner.send("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø: shop.json", file=discord.File(f, 'shop.json'))
        else:
            await owner.send("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø: shop.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Backup sent successfully to owner.")

    except Exception as e:
        print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Error sending backup to owner: {e}")

async def scheduled_backup_task():
    await bot.wait_until_ready()
    print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Starting scheduled backup task.")
    await asyncio.sleep(60)
    await send_backup_to_owner()

    while not bot.is_closed():
        await asyncio.sleep(24 * 60 * 60)
        await send_backup_to_owner()

@bot.event
async def on_ready():
    print(f'We have logged in as {bot.user}')
    if not os.path.exists(DATA_DIR):
        os.makedirs(DATA_DIR, exist_ok=True)
        print(f"Created data directory: {DATA_DIR}")

    data = load_data()
    added = 0
    for guild in bot.guilds:
        for member in guild.members:
            if member.bot:
                continue
            if str(member.id) not in data:
                data[str(member.id)] = {"coins": 0, "daily_streak":0}
                added+=1
    save_data(data)
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    bot.loop.create_task(scheduled_backup_task())

@bot.event
async def on_member_join(member):
    if not member.bot:
        add_user_if_needed(member.id)

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    add_coins(message.author.id, 1)
    await bot.process_commands(message)

@bot.command()
async def shop(ctx):
    shop_items = load_shop()
    embed = discord.Embed(title="üõí –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π", color=discord.Color.blue())

    if not shop_items:
        embed.description = "–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ä–æ–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `!addrole`."
    else:
        for i, item in enumerate(shop_items, start=1):
            embed.add_field(
                name=f"{i}. {item['name']}",
                value=f"–¶–µ–Ω–∞: {item['price']} –º–æ–Ω–µ—Ç",
                inline=False
            )
    await ctx.send(embed=embed)

@bot.command()
async def buy(ctx, –Ω–æ–º–µ—Ä: int):
    shop_items = load_shop()
    data = load_data()
    user_id = str(ctx.author.id)

    if –Ω–æ–º–µ—Ä < 1 or –Ω–æ–º–µ—Ä > len(shop_items):
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–æ–ª–∏")
        return
    item = shop_items[–Ω–æ–º–µ—Ä - 1]
    role = ctx.guild.get_role(item["id"])
    if not role:
        await ctx.send("–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        return
    if user_id not in data or data[user_id]["coins"] < item["price"]:
        await ctx.send("–ë–ª—è–¥—Å–∫–∏–π –Ω–∏—â–∏–π —Ö—É–π")
        return
    if role in ctx.author.roles:
        await ctx.send("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å, –∂–∞–¥–Ω—ã–π —Ç—ã —É–±–ª—é–¥–æ–∫")
        return
    try:
        await ctx.author.add_roles(role)
    except discord.Forbidden:
        await ctx.send("–£ –±–æ—Ç–∞ –ø—Ä–∞–≤ –Ω–µ—Ç –Ω–∏—Ö—É—è —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å —ç—Ç—É —Ä–æ–ª—å")
        return
    data[user_id]["coins"] -= item["price"]
    save_data(data)
    await ctx.send(f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ä–æ–ª—å **{role.name}** –∑–∞ {item['price']} –º–æ–Ω–µ—Ç")

@bot.command()
async def users(ctx):
    data = load_data()

    if not data:
        await ctx.send("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
        return
    lines = []
    sorted_users = sorted(data.items(), key=lambda item: item[1].get("coins", 0), reverse=True)

    for user_id, user_data in sorted_users:
        member = ctx.guild.get_member(int(user_id))
        if member:
            name = member.display_name
        else:
            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_id})"
        coins = user_data.get("coins", 0)
        lines.append(f" **{name}** - {coins} –º–æ–Ω–µ—Ç")

    message = "üí∞ **–ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n" + "\n".join(lines)

    if len(message) > 1900:
        chunks = [message[i:i+1900] for i in range(0, len(message), 1900)]
        for chunk in chunks:
            await ctx.send(chunk)
    else:
        await ctx.send(message)

@bot.command()
async def addrole(ctx):
    author_roles_ids = [r.id for r in ctx.author.roles]
    if ROLE_FOR_SHOP_ADDS not in author_roles_ids:
        msg = await ctx.send("–¢—ã —á–µ –≤—ã–µ–±—ã–≤–∞–µ—à—å—Å—è —Ç—É–ø–∏–∑–¥–µ–Ω—å —É —Ç–µ–±—è –ø—Ä–∞–≤ –Ω–µ—Ç")
        await asyncio.sleep(10)
        await msg.delete()
        await ctx.message.delete()
        return

    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ä–æ–ª–∏
    prompt_role_name_msg = await ctx.send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏:")
    user_role_name_reply = None # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        user_role_name_reply = await bot.wait_for('message', check=check, timeout=60)
        role_name = user_role_name_reply.content.strip()
    except asyncio.TimeoutError:
        timeout_msg = await ctx.send("–ï–±–∞—Ç—å —Ç—ã —Ç–æ—Ä–º–æ–∑ –∫–æ–Ω–µ—á–Ω–æ")
        await asyncio.sleep(10)
        await timeout_msg.delete()
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞, –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if prompt_role_name_msg: await prompt_role_name_msg.delete()
        if ctx.message: await ctx.message.delete()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ —Ü–µ–Ω–µ
    prompt_price_msg = await ctx.send("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ä–æ–ª–∏: ")
    user_price_reply = None # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        user_price_reply = await bot.wait_for('message', check=check, timeout=60)
        price = int(user_price_reply.content.strip())
        if price < 0:
            raise ValueError
    except asyncio.TimeoutError:
        timeout_msg = await ctx.send("–ù—É –∏ —Ö—É–ª–∏ —Ç—ã –º–æ–ª—á–∏—à—å –±—ã–¥–ª–æ")
        await asyncio.sleep(10)
        await timeout_msg.delete()
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –¥–∏–∞–ª–æ–≥–æ–º:
        if prompt_role_name_msg: await prompt_role_name_msg.delete()
        if user_role_name_reply: await user_role_name_reply.delete()
        if prompt_price_msg: await prompt_price_msg.delete()
        if ctx.message: await ctx.message.delete()
        return
    except ValueError:
        error_msg = await ctx.send("–ï–±–∞—Ç—å —Ç—ã —Ç—É–ø–µ–π—à–∏–π –ø—Ä–æ—Å—Ç–æ, —á–∏—Å–ª–æ –≤–≤–µ–¥–∏ —Å—É–∫–∞")
        await asyncio.sleep(10)
        await error_msg.delete()
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –¥–∏–∞–ª–æ–≥–æ–º:
        if prompt_role_name_msg: await prompt_role_name_msg.delete()
        if user_role_name_reply: await user_role_name_reply.delete()
        if prompt_price_msg: await prompt_price_msg.delete()
        if user_price_reply: await user_price_reply.delete() # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if ctx.message: await ctx.message.delete()
        return

    existing_role = discord.utils.get(ctx.guild.roles, name=role_name)
    if existing_role:
        response_msg = await ctx.send(f"–†–æ–ª—å —Å –∏–º–µ–Ω–µ–º **{role_name}** —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–µ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω.")
        await ctx.send(f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å –≤ –º–∞–≥–∞–∑–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `!addexistingrole <RoleID> <Price>`.")
        await asyncio.sleep(10)
        await response_msg.delete()
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –¥–∏–∞–ª–æ–≥–æ–º:
        if prompt_role_name_msg: await prompt_role_name_msg.delete()
        if user_role_name_reply: await user_role_name_reply.delete()
        if prompt_price_msg: await prompt_price_msg.delete()
        if user_price_reply: await user_price_reply.delete()
        if ctx.message: await ctx.message.delete()
        return

    try:
        role = await ctx.guild.create_role(name=role_name)
    except discord.Forbidden:
        msg = await ctx.send("–ù—É —è –Ω–∏—â–µ—Ç–∞ –±–µ–∑ –ø—Ä–∞–≤(")
        await asyncio.sleep(10)
        await msg.delete()
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –¥–∏–∞–ª–æ–≥–æ–º:
        if prompt_role_name_msg: await prompt_role_name_msg.delete()
        if user_role_name_reply: await user_role_name_reply.delete()
        if prompt_price_msg: await prompt_price_msg.delete()
        if user_price_reply: await user_price_reply.delete()
        if ctx.message: await ctx.message.delete()
        return

    shop_items = load_shop()
    for item in shop_items:
        if item['id'] == role.id:
            msg = await ctx.send(f"–†–æ–ª—å **{role.name}** —É–∂–µ –µ—Å—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
            await asyncio.sleep(10)
            await msg.delete()
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º –¥–∏–∞–ª–æ–≥–æ–º:
            if prompt_role_name_msg: await prompt_role_name_msg.delete()
            if user_role_name_reply: await user_role_name_reply.delete()
            if prompt_price_msg: await prompt_price_msg.delete()
            if user_price_reply: await user_price_reply.delete()
            if ctx.message: await ctx.message.delete()
            return
            
    shop_items.append({
        "id": role.id,
        "name": role.name,
        "price": price
    })

    save_shop(shop_items)

    confirm_msg = await ctx.send(f"–†–æ–ª—å **{role_name}** –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ {price} –º–æ–Ω–µ—Ç")

    await asyncio.sleep(10) # –î–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    messages_to_delete = [
        confirm_msg,
        prompt_role_name_msg,
        user_role_name_reply,
        prompt_price_msg,
        user_price_reply,
        ctx.message # –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (!addrole)
    ]

    for msg_obj in messages_to_delete:
        if msg_obj: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–µ None)
            try:
                await msg_obj.delete()
            except discord.NotFound:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
                pass
            except discord.Forbidden:
                # –ï—Å–ª–∏ —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
                print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Bot does not have permissions to delete a message: {msg_obj.id}")
            except Exception as e:
                print(f"[{datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC] Error deleting message {msg_obj.id}: {e}")


@bot.command()
async def addexistingrole(ctx, role_id: int, price: int):
    author_roles_ids = [r.id for r in ctx.author.roles]
    if ROLE_FOR_SHOP_ADDS not in author_roles_ids:
        msg = await ctx.send("–¢—ã —á–µ –≤—ã–µ–±—ã–≤–∞–µ—à—å—Å—è —Ç—É–ø–∏–∑–¥–µ–Ω—å —É —Ç–µ–±—è –ø—Ä–∞–≤ –Ω–µ—Ç")
        await asyncio.sleep(10)
        await msg.delete()
        await ctx.message.delete()
        return

    role = ctx.guild.get_role(role_id)
    if not role:
        await ctx.send("–†–æ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    if price < 0:
        await ctx.send("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.")
        return

    shop_items = load_shop()
    for item in shop_items:
        if item['id'] == role.id:
            await ctx.send(f"–†–æ–ª—å **{role.name}** (ID: {role.id}) —É–∂–µ –µ—Å—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")
            return

    shop_items.append({
        "id": role.id,
        "name": role.name,
        "price": price
    })
    save_shop(shop_items)
    await ctx.send(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ä–æ–ª—å **{role.name}** (ID: {role.id}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –∑–∞ {price} –º–æ–Ω–µ—Ç.")

@bot.command()
async def manual_backup(ctx):
    if ctx.author.id != OWNER_DISCORD_ID:
        await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    await ctx.send("–ó–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω–æ–π –±—ç–∫–∞–ø... –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    await send_backup_to_owner()
    await ctx.send("–†—É—á–Ω–æ–π –±—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω.")

bot.run(TOKEN)
